// Generated by psc-bundle 0.10.7
var PS = {};
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Zero = (function () {
      function Zero() {

      };
      Zero.value = new Zero();
      return Zero;
  })();
  var Add1 = (function () {
      function Add1(value0) {
          this.value0 = value0;
      };
      Add1.create = function (value0) {
          return new Add1(value0);
      };
      return Add1;
  })();
  var two = Add1.create(new Add1(Zero.value));
  var foldNat = function (base) {
      return function (rec) {
          return function (v) {
              if (v instanceof Zero) {
                  return base;
              };
              if (v instanceof Add1) {
                  return rec(foldNat(base)(rec)(v.value0));
              };
              throw new Error("Failed pattern match at Main line 16, column 1 - line 16, column 33: " + [ base.constructor.name, rec.constructor.name, v.constructor.name ]);
          };
      };
  };
  var plus = function (m) {
      return function (n) {
          return foldNat(n)(Add1.create)(m);
      };
  };
  var toInt = foldNat(0)(function (acc) {
      return 1 + acc | 0;
  });
  var showNat = new Data_Show.Show(function (n) {
      return Data_Show.show(Data_Show.showInt)(toInt(n));
  });
  var main = Control_Monad_Eff_Console.logShow(showNat)(plus(two)(two));
  var ans = plus(two)(two);
  exports["Zero"] = Zero;
  exports["Add1"] = Add1;
  exports["ans"] = ans;
  exports["foldNat"] = foldNat;
  exports["main"] = main;
  exports["plus"] = plus;
  exports["toInt"] = toInt;
  exports["two"] = two;
  exports["showNat"] = showNat;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
